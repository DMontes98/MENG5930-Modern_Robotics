import numpy as np


def FK_PoE(q, a, rot, jt, M):
    T = POE(q, a, rot, jt)
    Tf = np.dot(T, M)

    R = Tf[:3, :3]
    p = Tf[:3, 3]

    return R, p

def POE(q, a, rot, jt):
    T = np.eye(4)

    n = len(q)

    for ii in range(n-1,-1,-1): 
        if jt[ii] == 'R':
            rot_hat = np.array([[0, -rot[ii, 2], rot[ii, 1]],
                                [rot[ii, 2], 0, -rot[ii, 0]],
                                [-rot[ii, 1], rot[ii, 0], 0]])
            
            e_rot_hat = np.eye(3) + rot_hat * np.sin(q[ii]) + rot_hat.dot(rot_hat) * (1 - np.cos(q[ii]))
        elif jt[ii] == 'P':
            rot_hat = np.zeros((3, 3))
            e_rot_hat = np.eye(3)


        if jt[ii] == 'R' and ii>1:
            Sv = -np.transpose(np.cross(rot[ii, :], a[ii, :]))
        elif jt[ii] == 'R' and ii == 1:
            Sv = [0,0,0]
        elif jt[ii] == 'P':
            Sv = a[ii, :]

        p = (np.eye(3) * q[ii] + (1 - np.cos(q[ii])) * rot_hat + (q[ii] - np.sin(q[ii])) * rot_hat.dot(rot_hat)).dot(Sv)

        e_zai = np.vstack((np.hstack((e_rot_hat, p[:, np.newaxis])), np.array([0, 0, 0, 1])))

        T = np.dot(e_zai, T)

    return T

t1 = 0
t2 = 0
t3 = -np.pi/2
t4 = -np.pi/2

theta = np.array([t1, t2, t3, t4])

a = np.array([[0,   0,        0],
              [0,   0,    89.45],
              [35,  0,   189.45],
              [135, 0,   189.45]])

rot = np.array([[0, 0, 1],
                [0, 1, 0],
                [0, 1, 0],
                [0, 1, 0]])

jt = 'RRRR'

M = np.array([[1, 0, 0, 221.05],
              [0, 1, 0,      0],
              [0, 0, 1, 189.45],
              [0, 0, 0,      1]])

[R, p] = FK_PoE(theta, a, rot, jt, M)

print("Rotation Matrix (R):\n", R)
print("Position (p):\n", p)
